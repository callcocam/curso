<?php
/**
 * Created by PhpStorm.
 * User: Call
 * Date: 17/08/2016
 * Time: 00:14
 */

namespace Base\Controller;


use Base\Form\UploadForm;
use Interop\Container\ContainerInterface;
use Zend\Http\PhpEnvironment\Response;
use Zend\Mvc\Controller\AbstractActionController;
use Zend\Mvc\MvcEvent;
use Zend\View\Model\ViewModel;

abstract class AbstractController extends AbstractActionController {

    /**
     * @var $containerInterface ContainerInterface
     */
    protected $containerInterface;
    protected $table;
    protected $model;
    protected $form;
    protected $filter;
    protected $user;
    protected $route;
    protected $template='/admin/admin/listar';
    protected $controller;
    protected $action;
    protected $id;
    protected $page;
    protected $data;
    protected $filtro=[];

    /**
     * @param MvcEvent $e
     * @return mixed
     */
    public function onDispatch(MvcEvent $e)
    {
        return parent::onDispatch($e); // TODO: Change the autogenerated stub
    }

    /**
     * @param ContainerInterface $containerInterface
     */
    abstract  function __construct(ContainerInterface $containerInterface);

    /**
     * @return mixed
     */
    public function getTable()
    {
        return $this->containerInterface->get($this->table);
    }

    /**
     * @return mixed
     */
    public function getModel()
    {
        return $this->containerInterface->get($this->model);
    }

    /**
     * @return mixed
     */
    public function getForm($form="")
    {
        if(empty($form)):
            $this->form=$this->containerInterface->get($this->form);
        else:
            $this->form=$this->containerInterface->get($form);
        endif;
        return $this->form;
    }

    /**
     * @return mixed
     */
    public function getFilter($filter="")
    {
        if(empty($filter)):
            $this->filter=$this->containerInterface->get($this->filter);
        else:
            $this->filter=$this->containerInterface->get($filter);
        endif;
        return $this->filter;
    }

    /**
     * @return mixed
     */
    public function getData()
    {
        $request=$this->getRequest();
        if(!$request->isPost()):
            return [];
        endif;
        $this->data=array_merge_recursive($request->getPost()->toArray(),
            $request->getFiles()->toArray());
        return $this->data;
    }


    public function indexAction()
    {
        $this->page=$this->params()->fromRoute('page','1');
        if($this->table):
            $this->filtro=$this->getData();
            $this->filtro['asset_id']=$this->controller;
            $this->data=$this->getTable()->select($this->filtro,$this->page);
            $this->data=$this->data->toArray();
        endif;

        $view=new ViewModel($this->data);
        $view->setVariable('controller',$this->controller);
        $view->setVariable('route',$this->route);
        $view->setVariable('page',$this->page);
        $view->setVariable('user',$this->user);
        $view->setVariable('filtro',$this->filtro);
        $view->setTemplate($this->template);
        return $view;
    }

    public function uploadAction()
    {
        $form = new UploadForm('upload-form');

        $tempFile = null;

        $prg = $this->fileprg($form);

        if ($prg instanceof Response) {
            return $prg; // Return PRG redirect response
        }

        if (is_array($prg)) {
            if ($form->isValid()) {
                $data = $form->getData();

               var_dump($data);
            }

            // Form not valid, but file uploads might be valid...
            // Get the temporary file information to show the user in the view
            $fileErrors = $form->get('image-file')->getMessages();

            if (empty($fileErrors)) {
                $tempFile = $form->get('image-file')->getValue();
            }
        }

        $view=new ViewModel($this->data);
        $view->setVariable('controller',$this->controller);
        $view->setVariable('tempFile',$tempFile);
        $view->setVariable('form',$form);
        $view->setVariable('route',$this->route);
        $view->setVariable('page',$this->page);
        $view->setVariable('user',$this->user);
        $view->setVariable('filtro',$this->filtro);
        $view->setTemplate('/admin/admin/upload');
        return $view;
    }

} 